
# coding: utf-8
#shreyank kini.

# In[1]:


import pandas as pd                 # for working with data in Python
import numpy as np
import matplotlib.pyplot as plt     # for visualization
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn import linear_model


# In[4]:


plt.style.use(style='ggplot')
plt.rcParams['figure.figsize'] = (10, 6)


# In[2]:


train = pd.read_csv('train.csv')
test = pd.read_csv('test.csv')


# In[3]:


print("Train data shape:", train.shape)
print("Test data shape:", test.shape)


# In[5]:


print (train.SalePrice.describe())


# In[7]:


print ("Skew is:", train.SalePrice.skew())
plt.hist(train.SalePrice, color='g')
plt.show()


# In[8]:


target = np.log(train.SalePrice)
print ("\n Skew is:", target.skew())
plt.hist(target, color='g')
plt.show()


# In[9]:


numeric_features = train.select_dtypes(include=[np.number])
print(numeric_features.dtypes)


# In[10]:


corr = numeric_features.corr()


# In[11]:


print (corr['SalePrice'].sort_values(ascending=False)[:5], '\n')
print (corr['SalePrice'].sort_values(ascending=False)[-5:])


# In[16]:


print(train.OverallQual.unique())




# In[17]:


quality_pivot = train.pivot_table(index='OverallQual', values='SalePrice', aggfunc=np.median)
print(quality_pivot)


# In[19]:


quality_pivot.plot(kind='bar', color='g')
plt.xlabel('Overall Quality')
plt.ylabel('Median Sale Price')
plt.xticks(rotation=0)
plt.show()


# In[20]:


plt.scatter(x=train['GrLivArea'], y=target)
plt.ylabel('Sale Price')
plt.xlabel('Above grade (ground) living area square feet')
plt.show()


# In[21]:


plt.scatter(x=train['GarageArea'], y=target)
plt.ylabel('Sale Price')
plt.xlabel('Garage Area')
plt.show()


# In[22]:


#outlier analysis


# In[23]:


train = train[train['GarageArea'] < 1200]


# In[24]:


#null values


# In[25]:


nulls = pd.DataFrame(train.isnull().sum().sort_values(ascending=False)[:25])
nulls.columns = ['Null Count']
nulls.index.name = 'Feature'
#nulls
print(nulls)


# In[26]:


categoricals = train.select_dtypes(exclude=[np.number])
print(categoricals.describe())


# In[27]:


print ("Original: \n")
print (train.Street.value_counts(), "\n")


# In[28]:


train['enc_street'] = pd.get_dummies(train.Street, drop_first=True)
test['enc_street'] = pd.get_dummies(test.Street, drop_first=True)


# In[29]:


print ('Encoded: \n')
print (train.enc_street.value_counts())


# In[30]:


data = train.select_dtypes(include=[np.number]).interpolate().dropna()


# In[31]:


print(sum(data.isnull().sum() != 0))


# In[32]:


y = np.log(train.SalePrice)
X = data.drop(['SalePrice', 'Id'], axis=1)


# In[33]:


X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42, test_size=.33)


# In[34]:


lr = linear_model.LinearRegression()


# In[35]:


model = lr.fit(X_train, y_train)


# In[36]:


print("R^2 is: \n", model.score(X_test, y_test))


# In[37]:


predictions = model.predict(X_test)


# In[38]:


print('RMSE is: \n', mean_squared_error(y_test, predictions))


# In[40]:


actual_values = y_test
plt.scatter(predictions, actual_values, alpha=.75,
            color='g')  # alpha helps to show overlapping data
plt.xlabel('Predicted Price')
plt.ylabel('Actual Price')
plt.title('Linear Regression Model')
plt.show()


# In[41]:


for i in range (-2, 3):
    alpha = 10**i
    rm = linear_model.Ridge(alpha=alpha)
    ridge_model = rm.fit(X_train, y_train)
    preds_ridge = ridge_model.predict(X_test)

    plt.scatter(preds_ridge, actual_values, alpha=.75, color='b')
    plt.xlabel('Predicted Price')
    plt.ylabel('Actual Price')
    plt.title('Ridge Regularization with alpha = {}'.format(alpha))
    overlay = 'R^2 is: {}\nRMSE is: {}'.format(
                    ridge_model.score(X_test, y_test),
                    mean_squared_error(y_test, preds_ridge))
    plt.annotate(s=overlay,xy=(12.1,10.6),size='x-large')
    plt.show()


# In[42]:


print("R^2 is: \n", model.score(X_test, y_test))


# In[43]:


submission = pd.DataFrame()


# In[44]:


submission['Id'] = test.Id


# In[45]:


feats = test.select_dtypes(
    include=[np.number]).drop(['Id'], axis=1).interpolate()


# In[46]:


predictions = model.predict(feats)


# In[47]:


final_predictions = np.exp(predictions)


# In[48]:


print("Original predictions are: \n", predictions[:10], "\n")
print("Final predictions are: \n", final_predictions[:10])


# In[49]:


# assign these predictions and check
submission['SalePrice'] = final_predictions
# submission.head()
print(submission.head())


# In[50]:


submission.to_csv('submission.csv', index=False)

